(function (name, context, definition) { if (typeof module !== "undefined" && module.exports) { module.exports = definition() } else { if (typeof define === "function" && define.amd) { define(definition) } else { context[name] = definition() } } })("AK", this, function () {
    var _fingerprint = function (options) { var nativeForEach, nativeMap; nativeForEach = Array.prototype.forEach; nativeMap = Array.prototype.map; this.each = function (obj, iterator, context) { if (obj === null) { return } if (nativeForEach && obj.forEach === nativeForEach) { obj.forEach(iterator, context) } else { if (obj.length === +obj.length) { for (var i = 0, l = obj.length; i < l; i++) { if (iterator.call(context, obj[i], i, obj) === {}) { return } } } else { for (var key in obj) { if (obj.hasOwnProperty(key)) { if (iterator.call(context, obj[key], key, obj) === {}) { return } } } } } }; this.map = function (obj, iterator, context) { var results = []; if (obj == null) { return results } if (nativeMap && obj.map === nativeMap) { return obj.map(iterator, context) } this.each(obj, function (value, index, list) { results[results.length] = iterator.call(context, value, index, list) }); return results }; if (typeof options == "object") { this.hasher = options.hasher; this.screen_resolution = options.screen_resolution; this.screen_orientation = options.screen_orientation; this.canvas = options.canvas; this.ie_activex = options.ie_activex } else { if (typeof options == "function") { this.hasher = options } } }; _fingerprint.prototype = {
        get: function () { var keys = []; keys.push(navigator.userAgent); keys.push(navigator.language); keys.push(screen.colorDepth); if (this.screen_resolution) { var resolution = this.getScreenResolution(); if (typeof resolution !== "undefined") { keys.push(resolution.join("x")) } } keys.push(new Date().getTimezoneOffset()); keys.push(this.hasSessionStorage()); keys.push(this.hasLocalStorage()); keys.push(!!window.indexedDB); if (document.body) { keys.push(typeof (document.body.addBehavior)) } else { keys.push(typeof undefined) } keys.push(typeof (window.openDatabase)); keys.push(navigator.cpuClass); keys.push(navigator.platform); keys.push(navigator.doNotTrack); keys.push(this.getPluginsString()); if (this.canvas && this.isCanvasSupported()) { keys.push(this.getCanvasFingerprint()) } if (this.hasher) { return this.hasher(keys.join("###"), 31) } else { return this.murmurhash3_32_gc(keys.join("###"), 31) } }, murmurhash3_32_gc: function (key, seed) { var remainder, bytes, h1, h1b, c1, c2, k1, i; remainder = key.length & 3; bytes = key.length - remainder; h1 = seed; c1 = 3432918353; c2 = 461845907; i = 0; while (i < bytes) { k1 = ((key.charCodeAt(i) & 255)) | ((key.charCodeAt(++i) & 255) << 8) | ((key.charCodeAt(++i) & 255) << 16) | ((key.charCodeAt(++i) & 255) << 24); ++i; k1 = ((((k1 & 65535) * c1) + ((((k1 >>> 16) * c1) & 65535) << 16))) & 4294967295; k1 = (k1 << 15) | (k1 >>> 17); k1 = ((((k1 & 65535) * c2) + ((((k1 >>> 16) * c2) & 65535) << 16))) & 4294967295; h1 ^= k1; h1 = (h1 << 13) | (h1 >>> 19); h1b = ((((h1 & 65535) * 5) + ((((h1 >>> 16) * 5) & 65535) << 16))) & 4294967295; h1 = (((h1b & 65535) + 27492) + ((((h1b >>> 16) + 58964) & 65535) << 16)) } k1 = 0; switch (remainder) { case 3: k1 ^= (key.charCodeAt(i + 2) & 255) << 16; case 2: k1 ^= (key.charCodeAt(i + 1) & 255) << 8; case 1: k1 ^= (key.charCodeAt(i) & 255); k1 = (((k1 & 65535) * c1) + ((((k1 >>> 16) * c1) & 65535) << 16)) & 4294967295; k1 = (k1 << 15) | (k1 >>> 17); k1 = (((k1 & 65535) * c2) + ((((k1 >>> 16) * c2) & 65535) << 16)) & 4294967295; h1 ^= k1 } h1 ^= key.length; h1 ^= h1 >>> 16; h1 = (((h1 & 65535) * 2246822507) + ((((h1 >>> 16) * 2246822507) & 65535) << 16)) & 4294967295; h1 ^= h1 >>> 13; h1 = ((((h1 & 65535) * 3266489909) + ((((h1 >>> 16) * 3266489909) & 65535) << 16))) & 4294967295; h1 ^= h1 >>> 16; return h1 >>> 0 }, hasLocalStorage: function () { try { return !!window.localStorage } catch (e) { return true } }, hasSessionStorage: function () { try { return !!window.sessionStorage } catch (e) { return true } }, isCanvasSupported: function () { var elem = document.createElement("canvas"); return !!(elem.getContext && elem.getContext("2d")) }, isIE: function () { if (navigator.appName === "Microsoft Internet Explorer") { return true } else { if (navigator.appName === "Netscape" && /Trident/.test(navigator.userAgent)) { return true } } return false }, getPluginsString: function () { if (this.isIE() && this.ie_activex) { return this.getIEPluginsString() } else { return this.getRegularPluginsString() } }, getRegularPluginsString: function () { return this.map(navigator.plugins, function (p) { var mimeTypes = this.map(p, function (mt) { return [mt.type, mt.suffixes].join("~") }).join(","); return [p.name, p.description, mimeTypes].join("::") }, this).join(";") }, getIEPluginsString: function () { if (window.ActiveXObject) { var names = ["ShockwaveFlash.ShockwaveFlash", "AcroPDF.PDF", "PDF.PdfCtrl", "QuickTime.QuickTime", "rmocx.RealPlayer G2 Control", "rmocx.RealPlayer G2 Control.1", "RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)", "RealVideo.RealVideo(tm) ActiveX Control (32-bit)", "RealPlayer", "SWCtl.SWCtl", "WMPlayer.OCX", "AgControl.AgControl", "Skype.Detection"]; return this.map(names, function (name) { try { new ActiveXObject(name); return name } catch (e) { return null } }).join(";") } else { return "" } }, getScreenResolution: function () { var resolution; if (this.screen_orientation) { resolution = (screen.height > screen.width) ? [screen.height, screen.width] : [screen.width, screen.height] } else { resolution = [screen.height, screen.width] } return resolution }, getCanvasFingerprint: function () {
            var canvas = document.createElement("canvas"); var ctx = canvas.getContext("2d");
            var txt = "http://login.q1.com"; ctx.textBaseline = "top"; ctx.font = "14px 'Arial'"; ctx.textBaseline = "alphabetic"; ctx.fillStyle = "#f60"; ctx.fillRect(125, 1, 62, 20); ctx.fillStyle = "#069"; ctx.fillText(txt, 2, 15); ctx.fillStyle = "rgba(102, 204, 0, 0.7)"; ctx.fillText(txt, 4, 17); return canvas.toDataURL()
        }
    }; return _fingerprint
});

var CodeName = navigator.appCodeName;
var BrowserName = navigator.appName;
var BrowserLanguage = navigator.browserLanguage || "";;
var ReferrerUrl = document.referrer;
var ThisURL = document.URL;
var ThisDomain = document.domain;

if (ThisURL.lastIndexOf('#') == ThisURL.length - 1) {
    ThisURL = ThisURL.substring(0, ThisURL.length - 1)
}
if(typeof pid!= "undefined" && pid){ 
  ThisURL+=(ThisURL.lastIndexOf('?')>0?"&":"?")+"pid="+pid;
}

if (typeof drkwd != "undefined") {//当前页无关键字但来源页有时强制拼上
    if (drkwd != "") {
        ThisURL = ThisURL + "&kwd=" + encodeURIComponent(drkwd);
    }
}
if (ReferrerUrl.lastIndexOf('#') == ReferrerUrl.length - 1) {
    ReferrerUrl = ReferrerUrl.substring(0, ReferrerUrl.length - 1)
}
var ThisSUV = "";
try {
    var curfinger = new AK({ canvas: true, ie_activex: true, screen_resolution: true });
    ThisSUV = curfinger.get();
} catch (e) { }

function addWebVisit() {
    var refurl = ReferrerUrl;//特殊处理来源地址，移除key长度>32,value为空或长度>128
    if (refurl != "") {
        try {
            var nv = loadUrlQuery(refurl);
            for (var k in nv) {
                if (k.length > 32 || nv[k] == "" || nv[k].length > 128) {
                    refurl = removeUrlParam(refurl, k);
                }
            }
        } catch (e) { }
    }
    if (refurl.length > 512) {
        refurl = refurl.substr(0, 512);
    }

    var parameterUrl = "CodeName=" + CodeName;
    parameterUrl = parameterUrl + "&BrowserName=" + BrowserName;
    parameterUrl = parameterUrl + "&BrowserLanguage=" + BrowserLanguage;
    parameterUrl = parameterUrl + "&ReferrerUrl=" + encodeURIComponent(refurl);
    parameterUrl = parameterUrl + "&URL=" + encodeURIComponent(ThisURL);
    parameterUrl = parameterUrl + "&Domain=" + escape(ThisDomain);
    if (ThisSUV != "") {
        parameterUrl = parameterUrl + "&SUV=" + ThisSUV;
    }

    if (ThisURL.toLowerCase().indexOf("http") == 0) {
        var visitimg = new Image();
        visitimg.src = window.location.protocol + "//track.q1.com/WebIO/AddWebVisit.aspx?" + parameterUrl + "&visitra=" + Math.random();
    }
}
addWebVisit();


function clickra(num) {
    if (num == null) num = 9999;
    return Math.floor(Math.random() * num) + Math.random();
}
function addWebClick(clickname, ob) {
    if (GetCookie("szgla_userid") != "") {
        clickname = clickname + "_已注册";
    }
    if (GetCookie(clickname) == "1") {
        return;
    }

    SaveClick(clickname);
    if (ThisURL.toLowerCase().indexOf("http") == 0) {
        if (ob && ob.href) {
            if (ob.href.indexOf(".application" > 0)) {
                clickname += "_ClickOnce"
            }
        }
        var img = new Image();
        var clicknameencode = encodeURIComponent(clickname);
        var clickradid = GetCookie("radid");
        var clicksuv = ThisSUV;

        img.src = window.location.protocol + '//track.q1.com/WebIO/AddWebClick.aspx?url=' + encodeURIComponent(ThisURL) + '&clickname=' + clicknameencode + '&radid=' + clickradid + '&SUV=' + clicksuv + '&clickra=' + clickra(9999);
        if (typeof _gat != "undefined" && _gat) {
            if (typeof pageTracker == "undefined") {
                pageTracker = _gat._getTracker('UA-11835696-2');
            }
            if (ob && ob.href) {
                pageTracker._trackEvent(window.location.href, clickname, ob.href);
            } else {
                pageTracker._trackEvent(window.location.href, clickname);
            }
        }
        try {
            //声明_czc对象:
            _czc = _czc || [];
            //绑定siteid
            //_czc.push(["_setAccount", "XXXXXXXX"]);
            var _cobjid = "";
            var _cobjhref = "";
            if (ob && ob.id) _cobjid = ob.id;
            if (ob && ob.href) _cobjhref = ob.href;
            _czc.push(["_trackEvent", window.location.href, clickname, _cobjhref]);
            //_czc.push(["_trackEvent", window.location.href, clickname, _cobjhref, 1, _cobjid]);
        }
        catch (e) { }
    }
}

function GetCookie(name) {
    try {
        var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
        if (arr = document.cookie.match(reg))
            return decodeURIComponent(arr[2]);
        else
            return "";
    }
    catch (e) { return "" }
}
function SaveClick(name) {
    document.cookie = name + "=1;path=/;";
}

//加载Url参数键值对
function loadUrlQuery(url) {
    var rarr = new Array();
    var s = url;
    var n = s.indexOf("?");
    if (n >= 0) {
        s = s.substring(n + 1);
    }
    else {
        return rarr;
    }
    var valuelist = s.split("&");
    for (var i = 0; i < valuelist.length; i++) {
        var pair = valuelist[i].split("=");
        rarr[pair[0]] = pair.length > 1 ? pair[1] : "";
    };
    return rarr;
};


//删除Url参数值
function removeUrlParam(url, parname) {
    var str = "";
    if (url.indexOf('?') != -1) {
        str = url.substr(url.indexOf('?') + 1);
    }
    else {
        return url;
    }
    var returnurl = "";
    if (str.indexOf('&') != -1) {
        var arr = str.split('&');
        for (i in arr) {
            var sarr = arr[i].split('=');
            if (sarr[0] != parname) {
                returnurl = returnurl + sarr[0] + (sarr.length > 1 ? "=" + sarr[1] : "") + "&";
            }
        }
        return url.substr(0, url.indexOf('?')) + "?" + returnurl.substr(0, returnurl.length - 1);
    }
    else {
        var arr = str.split('=');
        if (arr[0] == parname) {
            return url.substr(0, url.indexOf('?'));
        }
        else {
            return url;
        }
    }
}